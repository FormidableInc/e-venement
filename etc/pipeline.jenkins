pipeline {
    agent {
        dockerfile {
            filename "etc/dockerfile.jenkins"
            additionalBuildArgs '--build-arg UID=$(id -u) --build-arg GID=$(id -g)'
            args '--network=ci.network'
        }
    }

    environment {
        /* @todo should find a cleaner way to set this */
        UrlAddr = 'http://ci.libre-informatique.fr:8156'
        UrlPath = sh(returnStdout: true, script: "echo '~jenkins/E-venement/'${BRANCH_NAME}'/'${BRANCH_NAME}'/web'").trim()
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {
    	stage ('Where Am I') {
            steps {
                sh "uname -a"
                sh "php -v"
            }
        }

        stage ('Get Sub Module') {
            steps {
                sh "./bin/ci-scripts/do_run.sh submodule_init.sh"
            }
        }

        stage ('Create Config From Template') {
            steps {
                sh "./bin/ci-scripts/do_run.sh init_config.sh"
            }
        }

        stage ('Archive Gzip') {
            steps {
                sh 'Branch="${BRANCH_NAME}" ./bin/ci-scripts/do_run.sh gen_archive.sh'
                archiveArtifacts artifacts: "*.tar.gz*", fingerprint: true
            }
        }

        /* we do not deploy on copy because we want to check if deploy work well */
        stage ('Copy Artifact') {
            steps {
                build job: 'Copy Artifact', parameters: [string(name: 'Job', value: "${JOB_NAME}"), string(name: 'Project', value: "E-venement"), string(name: 'Branch', value: "${BRANCH_NAME}"), string(name: 'DoDeploy', value: "false")], wait: true
            }
        }

        stage ('Deploy Instance') {
            steps {
                build job: "Deploy E-venement", parameters: [string(name: 'Project', value: "E-venement"), string(name: 'Branch', value: "${BRANCH_NAME}"), string(name: 'Name', value: "${BRANCH_NAME}")], wait: true
            }
        }

        stage ('Test Instance') {
            steps {
                build job: "Test E-venement", parameters: [string(name: 'UrlAddr', value: "${env.UrlAddr}"), string(name: 'UrlPath', value: "${env.UrlPath}")], wait: true
            }
        }


    }

    post {
        always {
            cleanWs()
        }
    }
}
